


//-----------------------------------\\
// Color generators
//-----------------------------------\\

@mixin bg-color($variant, $variants: $background-colors) {
  $value: map-get($variants, $variant);

  $map-existance: type-of($value);
  @if $map-existance == 'list' {
    @if length($value) < 3 {
      @warn "$background-colors is using deprecated definition. Missing third option: border-color";
      $border-fallback: nth($value, 1);
      $value: append($value, $border-fallback, 'comma');
    };

    background-color: nth($value, 1);
    color: nth($value, 2);
    border-color: nth($value, 3);
  } @else {
    @warn 'Using deprecated variable definition. $background-colors should have values of lists (background-color, color, border-color)';
    background-color: $value;
  }
}

// Generate colour variants
@mixin gen-bg-variants($variants: $background-colors) {
  @each $variant in map-keys($variants) {
    &--#{$variant} {
      @include bg-color($variant);
    }

    &--to-#{$variant} {
      &:hover,
      &:focus,
      &:active {
        @include bg-color($variant);
      }
    }
  }
}

@mixin gen-color-variants($variants: $type-colors) {
  @each $variant in map-keys($variants) {
    $value: map-get($variants, $variant);

    &--#{$variant} {
      color: $value;
    }

    &--to-#{$variant} {
      &:hover,
      &:focus,
      &:active {
        color: $value;
      }
    }
  }
}

@mixin gen-border-color-variants($variants: $border-colors) {
  @each $variant in map-keys($variants) {
    $value: map-get($variants, $variant);

    &--#{$variant} {
      border-color: $value;
    }

    &--to-#{$variant} {
      &:hover,
      &:focus,
      &:active {
        border-color: $value;
      }
    }
  }
}

@mixin gen-state-color-variants($variants: $type-colors, $states: $states) {
  @each $variant in map-keys($variants) {
    $colour-value: map-get($variants, $variant);

    @each $state in map-keys($states) {
      $state-value: map-get($states, $state);

      &--#{$state}-#{$variant}.#{$state-value} {
        color: $colour-value;
      }
    }
  }
}

@mixin gen-state-background-variants($variants: $background-colors, $states: $states) {
  @each $variant in map-keys($variants) {
    $colour-value: map-get($variants, $variant);
    $map-existance: type-of($colour-value);

    @each $state in map-keys($states) {
      $state-value: map-get($states, $state);

      &--#{$state}-#{$variant}.#{$state-value} {
        @if $map-existance == 'list' {
          @if length($colour-value) < 3 {
            @warn "$background-colors is using deprecated definition. Missing third option: border-color";
            $border-fallback: nth($colour-value, 1);
            $colour-value: append($colour-value, $border-fallback, 'comma');
          };
          background-color: nth($colour-value, 1);
          color: nth($colour-value, 2);
          border-color: nth($colour-value, 3);
        } @else {
          @warn 'Using deprecated variable definition. $background-colors should have values of lists (background color, text color, border-color)';
          background-color: $colour-value;
        }
      }
    }

  }
}
